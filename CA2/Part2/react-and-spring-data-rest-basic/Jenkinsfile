pipeline {
    agent any

    environment {
        DOCKER_PATH = '/usr/local/bin/docker'
        PATH = "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/sbin:/usr/local/bin"
        DOCKER_IMAGE = "beramorim/ca5_part2-image:${env.BUILD_NUMBER}"
    }
    def isDockerAvailable() {
                    try {
                        sh "${env.DOCKER_PATH} --version"
                        return true
                    } catch (Exception e) {
                        return false
                    }
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out the code from the repository'
                git branch: 'main', url: 'https://github.com/BerAmorim/BerAmorim-devops-23-24-JPE-1110281.git'
            }
        }
        stage('Assemble') {
            steps {
                echo 'Assembling...'
                dir('CA2/Part2/react-and-spring-data-rest-basic') {
                    sh 'chmod +x ./gradlew'
                    sh './gradlew clean assemble'
                }
            }
        }
        stage('Test') {
            steps {
                echo 'Testing...'
                dir('CA2/Part2/react-and-spring-data-rest-basic') {
                    sh './gradlew test'
                    junit 'build/test-results/test/*.xml'
                }
            }
        }
        stage('Javadoc') {
            steps {
                echo 'Generating Javadoc...'
                dir('CA2/Part2/react-and-spring-data-rest-basic') {
                    sh './gradlew javadoc'
                    javadoc javadocDir: 'build/docs/javadoc', keepAll: false
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'build/docs/javadoc', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: 'CA2 Part2', useWrapperFileDirectly: true])
                }
            }
        }
        stage('Archive') {
            steps {
                echo 'Archiving...'
                dir('CA2/Part2/react-and-spring-data-rest-basic') {
                    archiveArtifacts artifacts: 'build/libs/*.war', fingerprint: true
                }
            }
        }
        stage('Publish Image') {
            steps {
                echo 'Building and pushing Docker image...'
                dir('CA2/Part2/react-and-spring-data-rest-basic') {
                    script {
                        // Verify if Docker Pipeline is available
                        if (isDockerAvailable()) {
                            def appImage = docker.build("${env.DOCKER_IMAGE}")
                            docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                                appImage.push()
                                echo "Built and pushed image with tag: ${env.DOCKER_IMAGE}"
                            }
                        } else {
                            error "Docker is not available. Please ensure Docker is installed and the Docker Pipeline plugin is enabled."
                        }
                    }
                }
            }
        }
    }
}
